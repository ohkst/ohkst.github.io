include:
  - local: .gitlab-ci/ci-common.yml
  - local: .gitlab-ci/dev-variable.yml

stages:
  - vaccine-check
  - test
  - lint-and-detekt
  - image-vulnerability-scan
  - frontend-build
  - docker-login
  - docker-build-and-ecr-upload

vaccine_check:
  stage: vaccine-check
  image: $DOCKER_GIT_CI_IMAGE
  script:
    - echo $CI_SERVER_HOST
    - echo $CI_COMMIT_SHA
    - echo $CI_COMMIT_REF_SLUG    # (lowercase) feature-sm-20230921-001 -> MR요청후 commit->push후
    - echo $CI_COMMIT_REF_NAME    # feature/SM-20230921-001 -> MR요청후 commit->push후
    - echo $CI_PIPELINE_SOURCE    # merge_request_event / push -> MR요청후 commit->push후
    - echo $CI_COMMIT_BRANCH
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_TAG_MESSAGE
    - echo $CI_SERVER_HOST    # dev-gitlab.kis.zone
    - echo $CI_SERVER_NAME    # GitLab
    - echo $CI_SERVER   # yes
    - echo $GIT_CI_IMAGE  #
    - echo "Waiting for Vaccine Check 10 seconds"
    - sleep 10
    - CHANGES=$(git status --porcelain | wc -l)
    - >
      if [ "$CHANGES" -gt "0" ]; then
          echo "[------------ Git Status Changed ------------]"
          git status
          echo "[--------------------------------------------]"
      fi
    - exit $CHANGES
  after_script:
    - export TZ="${TIME_ZONE}"
    - echo "TAG_TIMESTAMP=$(date +%Y%m%d%H%M)" > tag.env
  artifacts:
    reports:
      dotenv: tag.env
  cache: [ ]
  tags:
    - $RUNNER
  rules:
    - !reference [ .rule, feature-branch-push-and-merge-request-event ]

junit:
  stage: test
  image: $JDK_IMAGE
  before_script:
    !reference [ .before_script, gradle ]
  script:
    - ./gradlew clean test --stacktrace
  artifacts:
    when: always
    reports:
      junit: "**/build/test-results/test/**/TEST-*.xml"
  tags:
    - $RUNNER
  rules:
    - !reference [ .rule, feature-branch-push-and-merge-request-event ]
  allow_failure: true

lint_and_detekt:
  stage: lint-and-detekt
  image: $JDK_IMAGE
  before_script:
    !reference [ .before_script, gradle ]
  script:
    - ./gradlew ktlintCheck detekt
  tags:
    - $RUNNER
  rules:
    - !reference [ .rule, feature-branch-push-and-merge-request-event ]

image-vulnerability-scan:
  stage: image-vulnerability-scan
  image: $JDK_IMAGE
  before_script:
    !reference [ .before_script, gradle ]
  script:
    - wget $ECR_LOGIN_URL
    - chmod 755 docker-credential-ecr-login
    - cp docker-credential-ecr-login /usr/bin/
    - ./gradlew build -x test :odin-api:jibBuildTar -Djib.from.image=$JDK_IMAGE
    - /scan/scannercli scan --dockerless --no-verify=true --host $AQUA_HOST --user $AQUA_USER --password $AQUA_PASSWORD --docker-archive $CI_PROJECT_DIR/odin-api/build/jib-image.tar $IMAGE_NAME:$IMAGE_TAG || echo 'scan fail skip'
  tags:
    - $RUNNER
  rules:
    - !reference [ .rule, release-branch-push ]
    - !reference [ .rule, rule-image-scan ]

frontend-build:
  stage: frontend-build
  image: node:20.11.1-alpine
  script:
    # - cd odin-frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - build/static
  tags:
    - $RUNNER
  rules:
    - !reference [ .rule, main-branch-push ]
    - !reference [ .rule, feature-branch-push-and-merge-request-event ]
    - !reference [ .rule, release-branch-push ]
    - !reference [ .rule, dev-branch-push ]
    - !reference [ .rule, tag-created ]

docker-login:
  image: $DOCKER_GIT_CI_IMAGE
  stage: docker-login
  before_script:
    - echo "========== LOGIN > BEFORE_SCRIPT =========="
  script:
    - echo "DOCKER_LOGIN_TOKEN=$(aws ecr get-login-password)" > token.env
  artifacts:
    reports:
      dotenv: token.env
  tags:
    - $RUNNER
  rules:
    - !reference [ .rule, main-branch-push ]
    - !reference [ .rule, feature-branch-push-and-merge-request-event ]
    - !reference [ .rule, release-branch-push ]
    - !reference [ .rule, dev-branch-push ]
    - !reference [ .rule, tag-created ]

docker-image-build-and-push-to-aws-ecr:
  stage: docker-build-and-ecr-upload
  image: $DOCKER_IMAGE
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    API_IMAGE: $IMAGE_NAME:${IMAGE_TAG}
    API_IMAGE_REGISTRY: $DEV_ECR_REGISTRY$REGISTRY_PATH/$IMAGE_NAME:${IMAGE_TAG}
  services:
    - docker:dind
  before_script:
    - echo "========== PACKAGE > BEFORE_SCRIPT =========="
    - echo $CI_REGISTRY
    - echo $API_IMAGE
    - echo $API_IMAGE_REGISTRY
    - echo $DOCKER_LOGIN_TOKEN
    - echo $DEV_ECR_REGISTRY
    - echo $DOCKER_LOGIN_TOKEN | docker login --username AWS --password-stdin $DEV_ECR_REGISTRY
  script:
    - echo "========== PACKAGE > SCRIPT =========="
    - docker build -t $API_IMAGE .
    - docker image ls
    - docker tag $API_IMAGE $API_IMAGE_REGISTRY
    - docker push $API_IMAGE_REGISTRY
  tags:
    - $RUNNER
  rules:
    - !reference [ .rule, main-branch-push ]
    - !reference [ .rule, feature-branch-push-and-merge-request-event ]
    - !reference [ .rule, release-branch-push ]
    - !reference [ .rule, dev-branch-push ]
    - !reference [ .rule, tag-created ]

after_script:
  - echo "End CI"
